<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>如何用Markdown去写一篇文章</title>
    <url>/2020/04/15/markdown%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　<strong>Markdown</strong>是一种<a href="https://zh.wikipedia.org/wiki/轻量级标记语言" target="_blank" rel="noopener">轻量级标记语言</a>,可以让人们专注于写文章而不是排版上,而且还可以转换成各种其他格式.</p>
<p>　　由于<strong>Markdown</strong>的轻量化、易读易写特性，并且对于<em>图片，图表、数学式</em>都有支持，当前许多网站都广泛使用<strong>Markdown</strong>来撰写帮助文档或是用于<a href="https://zh.wikipedia.org/wiki/网络论坛" target="_blank" rel="noopener">论坛</a>上发表消息。如<a href="https://zh.wikipedia.org/wiki/GitHub" target="_blank" rel="noopener">GitHub</a>、<a href="https://zh.wikipedia.org/wiki/Reddit" target="_blank" rel="noopener">Reddit</a>、<a href="https://zh.wikipedia.org/wiki/Diaspora" target="_blank" rel="noopener">Diaspora</a>、<a href="https://zh.wikipedia.org/wiki/Stack_Exchange" target="_blank" rel="noopener">Stack Exchange</a>、<a href="https://zh.wikipedia.org/wiki/OpenStreetMap" target="_blank" rel="noopener">OpenStreetMap</a> 、<a href="https://zh.wikipedia.org/wiki/SourceForge" target="_blank" rel="noopener">SourceForge</a>、<a href="https://zh.wikipedia.org/wiki/简书" target="_blank" rel="noopener">简书</a>等，甚至还能被使用来撰写<a href="https://zh.wikipedia.org/wiki/電子書" target="_blank" rel="noopener">电子书</a>。</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>用<strong>#+空格+标题</strong>的形式实现,几个#代表几级标题,总共有<strong>六级标题</strong></p>
</blockquote>
<a id="more"></a>



<p><span id="html"></span></p>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">***粗斜体**</span>*</span><br><span class="line">~~删除线~~</span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线<span class="xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>





<h3 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">网站名</span>](<span class="link">网址链接</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">网址链接</span>&gt;</span></span> <span class="xml"><span class="comment">&lt;!--一种快捷方法,直接输入网址--&gt;</span></span></span><br><span class="line"></span><br><span class="line">![<span class="string">图片名</span>](<span class="link">本地图片位置或网络图片地址</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">网站名字</span>][<span class="symbol">a</span>] <span class="xml"><span class="comment">&lt;!--通过引用的方法--&gt;</span></span></span><br><span class="line">[<span class="symbol">a</span>]:<span class="link">网站链接</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>　　链接和图片除了1,4行那种普通方法,还可以用如6,7行所示的引用方法.这种方法的好处就是编写时界面整洁  ( <em>[a]:网站链接</em> 可以放在任意位置,在成品中是不会显示出来的)</p>
</blockquote>
<p><a href="https://www.bilibili.com" target="_blank" rel="noopener">哔哩哔哩</a></p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>无序列表</span><br><span class="line"><span class="bullet">+ </span>无序列表</span><br><span class="line"> +无序列表的子列表</span><br><span class="line"> </span><br><span class="line"><span class="bullet">1. </span>有序列表</span><br><span class="line"><span class="bullet">2. </span>有序列表</span><br><span class="line"> 1.有序列表的子列表</span><br></pre></td></tr></table></figure>

<blockquote>
<p>　　列表分<strong>无序列表</strong>和<strong>有序列表</strong>,无序列表为一个加号<strong>+</strong>或减号<strong>-</strong>或星号<strong>*** + **空格</strong> + <strong>文字</strong>,然后就可以直接换行它会自动生成一个小圆点在前面,同时你也可以在最前面加上空格来做出列表的子集</p>
</blockquote>
<ul>
<li><p>列表</p>
</li>
<li><p>列表</p>
<ul>
<li>子列表</li>
</ul>
</li>
</ul>
<ol>
<li>有序列表</li>
<li>有序列表<ol>
<li>有序列表的子列表</li>
</ol>
</li>
</ol>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容</span></span><br><span class="line">&gt;&gt; 下一级引用</span><br></pre></td></tr></table></figure>

<blockquote>
<p>引用内容</p>
<blockquote>
<p>下一级引用</p>
</blockquote>
</blockquote>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`代码区块`</span></span><br><span class="line"></span><br><span class="line">​<span class="code">```</span>`java</span><br></pre></td></tr></table></figure>

<blockquote>
<p>　　代码块有两种,一种就是前面一直在用的<strong>代码块</strong>,为四个<strong>`</strong>符号( 键盘左上角的那个键 ) + <strong>代码语言</strong>,还有一种就是<strong>代码区块</strong></p>
</blockquote>
<p><code>代码区块</code></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<blockquote>
<p>表格用手打比较累,一般用快捷键生成</p>
</blockquote>
<h3 id="段落与缩进"><a href="#段落与缩进" class="headerlink" title="段落与缩进"></a>段落与缩进</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&amp;nbsp</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>两个空格</strong>+<strong>回车</strong>可以另起一个段落,<strong>缩进</strong>有很多种方式在这里推荐一种方式:切换到<strong>圆角状态</strong>后打<strong>两个空格</strong></p>
</blockquote>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line">---</span><br><span class="line"><span class="emphasis">___</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>三个以上的星号<strong>***或减号</strong>-<strong>或下划线</strong>_**</p>
</blockquote>
<hr>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">脚注[^a]</span><br><span class="line">[<span class="symbol">^a</span>]:<span class="link">这是一个脚注</span></span><br></pre></td></tr></table></figure>

<p>脚注<a href="这是一个脚注">^a</a></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>　　<strong>Markdown</strong>语法是支持<strong>html</strong>语法的,所以有些效果可以用html来展出出来,上面<a href="#html">字体样式</a>里的下划线便是一个例子,而且还可以在html里写<strong>行内样式</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sytle</span>=<span class="string">"border: 1px solid black"</span>&gt;</span></span>行内样式<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><span style="border: 1px solid black">行内样式</span></p>
<h3 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h3><p>　　最后来推荐一下写markdown的<strong>编辑器,</strong>市面上有很多,很多<strong>代码编辑器</strong>都支持markdown语法,像<em>vscode,atom,sublime</em>这些都是可以用来写markdown的,不过我在这里推荐<a href="https://typora.io/" target="_blank" rel="noopener"><strong>Typora</strong></a>这个编辑器,有以下几个优点.</p>
<ol>
<li>外观简洁</li>
<li>软件占用小</li>
<li>功能齐全</li>
<li>可以导出各种样式</li>
<li>快捷键丰富</li>
</ol>
]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>css的弹性布局</title>
    <url>/2020/04/18/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　css的<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout" target="_blank" rel="noopener">布局方式</a>有很多种,今天来谈谈<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout" target="_blank" rel="noopener">弹性布局</a>.<strong>2009</strong>年，<strong>W3C</strong> 提出了一种新的方案—-<strong>Flex</strong> 布局，可以<em>简便、完整、响应式</em>地实现各种页面布局.相对于传统的布局,弹性布局更加灵活,可以更加轻松的实现某些功能.</p>
<br>

<h2 id="如何启用弹性布局"><a href="#如何启用弹性布局" class="headerlink" title="如何启用弹性布局"></a>如何启用弹性布局</h2><blockquote>
<p>当某一个元素的<strong>display</strong>为<strong>flex</strong>时,这个元素就成了一个<strong>flex容器</strong>,在它里面便可以进行弹性布局.</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/display.gif" alt="display"></p>
<a id="more"></a>

<br>

<h2 id="弹性布局的一些特性"><a href="#弹性布局的一些特性" class="headerlink" title="弹性布局的一些特性"></a>弹性布局的一些特性</h2><blockquote>
<p>设置弹性布局后,弹性元素的<strong>float</strong>,<strong>clear</strong>和<strong>vertical-align</strong>将失效.</p>
<p>弹性布局内不存在<strong>边界重叠</strong></p>
</blockquote>
<br>

<h2 id="容器与项目"><a href="#容器与项目" class="headerlink" title="容器与项目"></a>容器与项目</h2><p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/%E5%AE%B9%E5%99%A8.png" alt="flex容器与项目"></p>
<ul>
<li><p>flex容器的子元素自动成为<strong>flex项目</strong></p>
</li>
<li><p>容器默认有两根轴,水平的<strong>主轴</strong>(main axis)和竖直的<strong>交叉轴</strong>(cross axis),轴的方向并不是固定的,呆会会讲到</p>
</li>
<li><p>项目默认沿主轴排列</p>
</li>
</ul>
<br>

<h2 id="flex的属性"><a href="#flex的属性" class="headerlink" title="flex的属性"></a>flex的属性</h2><blockquote>
<p>flex主要有以下几个属性:</p>
</blockquote>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-shrink</li>
<li>flex-grow</li>
<li>flex-basis</li>
<li>justify-content</li>
<li>align-items</li>
</ul>
<br>

<h3 id="flex的方向与换行"><a href="#flex的方向与换行" class="headerlink" title="flex的方向与换行"></a>flex的方向与换行</h3><p>　　flex项目默认是沿主轴排列的,事实上它一直都是如此,无法改变.那如果我想让他不再横着排列而是竖着该怎么办呢?虽然改变不了flex项目沿着主轴排列这个事实,但那我们可以<strong>改变主轴和交叉轴的方向</strong>.</p>
<br>

<h4 id="flex-directioin"><a href="#flex-directioin" class="headerlink" title="flex-directioin"></a>flex-directioin</h4><blockquote>
<p><strong>flex-direction</strong>就是为此而生的,它可以改变轴的方向,有如下几个<strong>值</strong>:</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/direction1.gif" alt="flex-direction"></p>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/direction2.gif" alt="flex-direction"></p>
<ul>
<li><strong>row</strong>(原始状态,主轴从左到右横向,交叉轴从上到下纵向)</li>
<li><strong>row-reverse</strong>(主轴从右到左横向,交叉轴从上到下纵向)</li>
<li><strong>column</strong>(主轴从上到下纵向,交叉轴从左到右横向)</li>
<li><strong>column-reverse</strong>(主轴从下到上纵向,交叉轴从左到右横向)</li>
<li><br>

</li>
</ul>
<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><blockquote>
<p>接下来是换行,当flex项目占满一行后如何改变,就看<strong>flex-wrap</strong>这个属性了,有如下几个<strong>值</strong>:</p>
</blockquote>
<ul>
<li><strong>nowrap</strong>(默认,不换行)</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/wrap1.png" alt="nowrap"></p>
<ul>
<li><strong>wrap</strong>(换行,第一行在上方)</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/wrap2.jpg" alt="wrap"></p>
<ul>
<li><strong>wrap-reverse</strong>(换行,第一行在下方)</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/wrap3.jpg" alt="wrap-reverse"></p>
<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><blockquote>
<p>还有一个属性: <strong>flex-flow</strong>,为前面两个属性的<strong>简写形式</strong></p>
</blockquote>
<p><code>flex-flow: flex-direction flex-wrap;</code></p>
<br>

<h3 id="flex的缩放与大小"><a href="#flex的缩放与大小" class="headerlink" title="flex的缩放与大小"></a>flex的缩放与大小</h3><blockquote>
<p><strong>注意! 以下属性都是属于flex项目的,要写在flex项目里.</strong></p>
</blockquote>
<p>　　flex容器默认是不换行的,那么当一行挤不下的时候会怎样呢?当然不是让它溢出来,而是会自动的缩放,而且你还可以自己调整每个flex项目缩放的比例.</p>
<br>

<h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p>　　flex项目的<strong>flex-shrink默认是1</strong>,也就是说,当flex项目一行排不下又不能换行时,它们会<strong>等比的进行缩小</strong>,值得一提的是,flex-shrink: 1并非是严格等比缩小,它还会<strong>考虑flex项目本身的的大小</strong>,这样的目的是为了一些原本就很小的元素不至于到最后宽度变为0.</p>
<p>　　那么假设有flex容器的宽度为200px,有三个flex项目,分别是50px,100px,120px.那么flex项目1是以如下方式缩小的:</p>
<ul>
<li>超出的宽度: 50px+100px+120px-200px=70px</li>
<li>缩小因子分母: 1*50+1*100+1*120=270(1为各flex项目的flex-strink)</li>
<li>缩小因子: 1*50/270</li>
<li>最终缩小宽度: 缩小因子*超出宽度</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/shrink.gif" alt="flex-shrink"></p>
<br>

<h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p>　　<strong>flex-grow默认是0</strong>,也就是说当容器有剩余时是<strong>不自动放大</strong>的,flex-grow的<strong>放大方法</strong>没有和flex-shrink一样将元素自身大小计算在内,只是根据flex-grow声明的份数计算出每个元素需要要分配多少,:</p>
<ul>
<li>容器剩余宽度</li>
<li>分成每份: 容器剩余宽度/所有flex-grow的值相加</li>
<li>最终放大宽度: 每份*flex-grow</li>
</ul>
<blockquote>
<p>没有多余宽度时使用flex-grow无效</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/grow.gif" alt="flex-grow"></p>
<br>

<h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><blockquote>
<p> flex-basis可以在元素缩放之前规定<strong>元素的初始尺寸</strong>,类似与height和width,但也有如下区别(以width为例):</p>
</blockquote>
<ul>
<li>两者都为0<ul>
<li>width: 不显示</li>
<li>flex-basis: 根据内容撑开宽度</li>
</ul>
</li>
<li>两者都非0<ul>
<li>数值相同时: 等效</li>
<li>数值不同时: flex-basis优先级高</li>
</ul>
</li>
<li>flex-basis为auto时(默认)<ul>
<li>有width: 由width决定</li>
<li>没有width: 根据内容撑开</li>
</ul>
</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/basis1.gif" alt="flex-basis"></p>
<blockquote>
<p>flex-basis<strong>并不等于width</strong>,而是主轴上的一段距离,当主轴方向改成column后,此时设置的是元素的height</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/basis2.gif" alt="flex-basis"></p>
<br>

<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><blockquote>
<p><strong>简写属性</strong>,即:</p>
</blockquote>
<p><code>flex: flex-grow flex-shrink flex-basis;</code></p>
<blockquote>
<p>同时它自身还有一些<strong>简写</strong>:</p>
</blockquote>
<ul>
<li><code>flex: 1;</code> = <code>flex: 1 1 0%;</code></li>
<li><code>flex: 2;</code> = <code>flex: 2 1 0%;</code></li>
<li><code>flex: auto</code> = <code>flex: 1 1 auto;</code></li>
<li><code>flex: none</code> = <code>flex: 0 0 auto;</code></li>
</ul>
<blockquote>
<p>具体可以表现为以下<strong>规律</strong>:</p>
</blockquote>
<ul>
<li>当 <code>flex</code> 取值为一个非负数字，则该数字为 <code>flex-grow</code> 值，<code>flex-shrink</code> 取 1，<code>flex-basis</code> 取 0%</li>
<li>当 <code>flex</code> 取值为一个长度或百分比，则视为 <code>flex-basis</code> 值，<code>flex-grow</code> 取 1，<code>flex-shrink</code> 取 1</li>
<li>当 <code>flex</code> 取值为两个非负数字，则分别视为 <code>flex-grow</code> 和 <code>flex-shrink</code> 的值，<code>flex-basis</code> 取 0%</li>
<li>当 <code>flex</code> 取值为一个非负数字和一个长度或百分比，则分别视为 <code>flex-grow</code> 和 <code>flex-basis</code> 的值，<code>flex-shrink</code> 取 1</li>
</ul>
<br>

<h3 id="flex的对齐方式"><a href="#flex的对齐方式" class="headerlink" title="flex的对齐方式"></a>flex的对齐方式</h3><blockquote>
<p> 弹性布局的一大优点就是元素可以方便的对齐或居中</p>
</blockquote>
<br>

<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><blockquote>
<p>定义了项目在<strong>主轴上的对齐方式</strong></p>
</blockquote>
<ul>
<li>flex-start: 主轴起始点对齐(默认值)</li>
<li>flex-end: 主轴结束点对齐</li>
<li>center: 居中</li>
<li>space-between: 两端对齐, 项目之间的间距相等</li>
<li>space-around: 两端离边框有一定间距</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/justify-content.gif" alt="justify-content"></p>
<br>

<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><blockquote>
<p>定义了项目在<strong>交叉轴上的对齐方式</strong></p>
</blockquote>
<ul>
<li>flex-start: 交叉轴起始点对齐</li>
<li>flex-end: 交叉轴结束点对齐</li>
<li>center: 居中</li>
<li>stretch: 如果项目未设置高度或设为auto,撑满整个容器的高度(默认值)</li>
<li>baseline: 项目的第一行文字的基线对齐</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/align-items.gif" alt="align-items"></p>
<br>

<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><blockquote>
<p>定义了<strong>多行</strong>在交叉轴上的对齐方式,如果只有<strong>一行则不起作用</strong></p>
</blockquote>
<ul>
<li>flex-start: 交叉轴起始点对齐</li>
<li>flex-end: 交叉轴结束点对齐</li>
<li>center: 居中</li>
<li>space-between: 两端对齐, 项目之间的间距相等</li>
<li>space-around: 两端离边框有一定间距</li>
</ul>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/align-content.png" alt="align-content"></p>
<br>

<h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><blockquote>
<p>设置<strong>单个项目的对齐方式</strong>, 需在项目中定义</p>
<p>属性值和align-items一致</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/align-self.gif" alt="align-self"></p>
<br>

<h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><blockquote>
<p>在项目中定义,可以指定项目的排列顺序,数值越小越靠前,最小为0.</p>
</blockquote>
<p><img src="/img/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/order.jpeg" alt="order"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>布局</tag>
        <tag>flex</tag>
      </tags>
  </entry>
</search>
